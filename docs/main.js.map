{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.config.ts","./src/app/app.routes.ts","./src/app/enums/idea-type.enum.ts","./src/app/services/login/login.service.ts","./src/app/services/register/register.service.ts","./src/app/services/supabase/supabase.service.ts","./src/app/services/task/task.service.ts","./src/app/utility/utility.service.ts","./src/app/views/add-task/add-task.component.ts","./src/app/views/add-task/add-task.component.html","./src/app/views/email/email-confirm/email-confirm.component.ts","./src/app/views/email/email-confirm/email-confirm.component.html","./src/app/views/email/login/login.component.ts","./src/app/views/email/login/login.component.html","./src/app/views/email/register/register.component.ts","./src/app/views/email/register/register.component.html","./src/app/views/email/reset-password/reset-password.component.ts","./src/app/views/email/reset-password/reset-password.component.html","./src/app/views/main-view/main-view.component.ts","./src/app/views/main-view/main-view.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component, inject } from '@angular/core';\nimport { Router, RouterOutlet } from '@angular/router';\n\n@Component({\n  standalone: true,\n  selector: 'app-root',\n  imports: [RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'LifePlanner';\n  userName = 'Login';\n\n  router = inject(Router);\n  openLogin() {\n    // let loginRef = this.loginDialog.open(LoginComponent);\n    // loginRef.afterClosed().subscribe((data) => {\n    //   if (data) {\n    //     console.log(data);\n    //     if (data.userDetails.hasOwnProperty('_profile')) {\n    //       var userName = data.userDetails._profile.data.email;\n    //       this.userName = userName;\n    //       console.log(userName);\n    //     }\n    //   }\n    // });\n    this.router.navigate(['/login']);\n  }\n  navigateToHome(): void {\n    this.router.navigate(['/']);\n  }\n}\n","<div class=\"navbar has-background-dark\">\r\n  <div class=\"navbar-brand\">\r\n    <div class=\"navbar-item\">\r\n      <h1 class=\"app-name has-gradient-text\" (click)=\"navigateToHome()\">\r\n        LifePlanner\r\n      </h1>\r\n    </div>\r\n  </div>\r\n  <!-- <div class=\"login-container\" (click)=\"openLogin()\">\r\n    <p id=\"user-name\">{{ userName }}</p>\r\n  </div> -->\r\n</div>\r\n<router-outlet></router-outlet>\r\n","import { ApplicationConfig } from '@angular/core';\r\nimport { provideRouter } from '@angular/router';\r\n\r\nimport { provideClientHydration } from '@angular/platform-browser';\r\nimport { provideHttpClient } from '@angular/common/http';\r\nimport { provideAnimations } from '@angular/platform-browser/animations';\r\nimport { provideToastr } from 'ngx-toastr';\r\nimport { routes } from './app.routes';\r\nexport const appConfig: ApplicationConfig = {\r\n  providers: [\r\n    provideRouter(routes),\r\n    provideClientHydration(),\r\n    provideHttpClient(),\r\n    provideAnimations(), // required animations providers\r\n    provideToastr({\r\n      positionClass: 'toast-top-right', // Position of the toast\r\n      closeButton: true,\r\n      enableHtml: true,\r\n      tapToDismiss: true, // Dismiss toast on click\r\n      preventDuplicates: true,\r\n    }),\r\n  ],\r\n};\r\n","import { Routes } from '@angular/router';\r\nimport { MainViewComponent } from './views/main-view/main-view.component';\r\nimport { EmailConfirmComponent } from './views/email/email-confirm/email-confirm.component';\r\nimport { ResetPasswordComponent } from './views/email/reset-password/reset-password.component';\r\nimport { LoginComponent } from './views/email/login/login.component';\r\nimport { RegisterComponent } from './views/email/register/register.component';\r\n\r\nexport const routes: Routes = [\r\n  { path: '', component: LoginComponent },\r\n  { path: 'main', component: MainViewComponent },\r\n  { path: 'confirmEmail', component: EmailConfirmComponent },\r\n  { path: 'resetPassword', component: ResetPasswordComponent },\r\n  { path: 'register', component: RegisterComponent },\r\n];\r\n","export enum IdeaType {\r\n  ideas = 0,\r\n  goals,\r\n  objectives,\r\n  achievements,\r\n}\r\n","import { inject, Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport {\n  AuthTokenResponsePassword,\n  createClient,\n  Session,\n  SupabaseClient,\n  User,\n  WeakPassword,\n} from '@supabase/supabase-js';\nimport { ToastrService } from 'ngx-toastr';\nimport { SupabaseService } from '../supabase/supabase.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoginService {\n  toastRService = inject(ToastrService);\n  supabaseService = inject(SupabaseService);\n  constructor() {}\n\n  async loginEmailPassword(loginCredentials): Promise<\n    | {\n        user: User;\n        session: Session;\n        weakPassword?: WeakPassword;\n      }\n    | {\n        user: null;\n        session: null;\n        weakPassword?: null;\n      }\n  > {\n    try {\n      const { data, error } =\n        await this.supabaseService.supabase.auth.signInWithPassword({\n          email: loginCredentials.email,\n          password: loginCredentials.password,\n        });\n      console.log(data);\n      if (error) {\n        throw error;\n      }\n\n      return data;\n    } catch (error) {\n      this.toastRService.error(`Login error : ${error.message}`, 'Failure');\n    }\n  }\n}\n","import { inject, Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport {\r\n  createClient,\r\n  Session,\r\n  SupabaseClient,\r\n  User,\r\n} from '@supabase/supabase-js';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { SupabaseService } from '../supabase/supabase.service';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RegisterService {\r\n  toastrService = inject(ToastrService);\r\n  supabaseService = inject(SupabaseService);\r\n  constructor() {}\r\n\r\n  async registerUser(\r\n    email,\r\n    password\r\n  ): Promise<\r\n    | {\r\n        user: User | null;\r\n        session: Session | null;\r\n      }\r\n    | {\r\n        user: null;\r\n        session: null;\r\n      }\r\n  > {\r\n    let { data, error } = await this.supabaseService.supabase.auth.signUp({\r\n      email: email,\r\n      password: password,\r\n    });\r\n\r\n    if (error) {\r\n      this.toastrService.error(error.message);\r\n      return;\r\n    }\r\n\r\n    if (data) {\r\n      this.toastrService.success(\r\n        `Registration successful for ${data.user.email}`\r\n      );\r\n      return data;\r\n    }\r\n  }\r\n\r\n  // async confirmUser(token: string, tokenId: string) {\r\n  //   await this.app.emailPasswordAuth.confirmUser({ token, tokenId });\r\n  // }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { createClient, SupabaseClient, User } from '@supabase/supabase-js';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SupabaseService {\r\n  supabaseUrl = environment.SUPABASE_URL;\r\n  supabase: SupabaseClient;\r\n  constructor() {\r\n    const supabaseKey = environment.SUPABASE_KEY;\r\n    this.supabase = createClient(this.supabaseUrl, supabaseKey);\r\n  }\r\n\r\n  async getUser(): Promise<User> {\r\n    const userResponse = await this.supabase.auth.getUser();\r\n    return userResponse.data.user;\r\n  }\r\n}\r\n","import { inject, Injectable } from '@angular/core';\r\nimport { createClient, SupabaseClient, User } from '@supabase/supabase-js';\r\nimport { environment } from 'src/environments/environment';\r\nimport { LoginService } from '../login/login.service';\r\nimport { SupabaseService } from '../supabase/supabase.service';\r\nimport { IdeaTask } from 'src/app/interfaces/idea-task.interface';\r\nimport { IdeaType } from 'src/app/enums/idea-type.enum';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskService {\r\n  supabaseService = inject(SupabaseService);\r\n  toastRService = inject(ToastrService);\r\n\r\n  async addTask(taskData: IdeaTask): Promise<boolean> {\r\n    try {\r\n      let user: User = await this.supabaseService.getUser();\r\n      let { data, error } = await this.supabaseService.supabase\r\n        .from('tasks')\r\n        .insert({\r\n          name: taskData.name,\r\n          description: taskData.description,\r\n          type: taskData.type,\r\n          completion_status: taskData.completion_status,\r\n          user_id: user.id,\r\n        });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      this.toastRService.success(`Task ${taskData.name} added successfully}`);\r\n      return true;\r\n    } catch (error) {\r\n      this.toastRService.error(`Failed to add task : ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async getTasks(): Promise<any> {\r\n    try {\r\n      let user: User = await this.supabaseService.getUser();\r\n      let { data: tasks, error } = await this.supabaseService.supabase\r\n        .from('tasks')\r\n        .select('*')\r\n        .eq('user_id', user.id);\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      if (tasks) {\r\n        return tasks;\r\n      }\r\n    } catch (error) {\r\n      this.toastRService.error(`Failed to add task : ${error.message}`);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UtilityService {\r\n  static getEnumKeyByValue = (enumObj: any, value: number) =>\r\n    Object.keys(enumObj).find((key) => enumObj[key] === value);\r\n  constructor() {}\r\n}\r\n","import { Component, inject, Inject, OnInit } from '@angular/core';\r\nimport {\r\n  ReactiveFormsModule,\r\n  UntypedFormControl,\r\n  UntypedFormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { IdeaType } from 'src/app/enums/idea-type.enum';\r\nimport { IdeaTask } from 'src/app/interfaces/idea-task.interface';\r\nimport { TaskService } from 'src/app/services/task/task.service';\r\n\r\n@Component({\r\n  selector: 'add-task',\r\n  standalone: true,\r\n  imports: [MatFormFieldModule, MatInputModule, ReactiveFormsModule],\r\n  templateUrl: './add-task.component.html',\r\n  styleUrl: './add-task.component.scss',\r\n})\r\nexport class AddTaskComponent implements OnInit {\r\n  taskService = inject(TaskService);\r\n  addTaskForm: UntypedFormGroup;\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: { taskType: IdeaType }) {}\r\n  ngOnInit(): void {\r\n    this.addTaskForm = new UntypedFormGroup({\r\n      name: new UntypedFormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n      ]),\r\n      description: new UntypedFormControl(''),\r\n    });\r\n  }\r\n\r\n  getValidationMessage() {\r\n    if (this.addTaskForm.controls.name.hasError('required')) {\r\n      return 'You must enter a name for the task';\r\n    }\r\n\r\n    return this.addTaskForm.controls.name.hasError('minLength')\r\n      ? 'At least 3 characters long'\r\n      : '';\r\n  }\r\n\r\n  async addTask(): Promise<void> {\r\n    const task: IdeaTask = {\r\n      name: this.addTaskForm.controls.name.value,\r\n      description: this.addTaskForm.controls.description.value,\r\n      type: this.data.taskType,\r\n      completion_status: 0,\r\n      user_id: null,\r\n    };\r\n    await this.taskService.addTask(task);\r\n  }\r\n}\r\n","<form\r\n  [formGroup]=\"addTaskForm\"\r\n  class=\"add-task-container flex-column\"\r\n  (submit)=\"addTask()\"\r\n>\r\n  <mat-form-field>\r\n    <mat-label>Enter task name</mat-label>\r\n    <input matInput placeholder=\"Task name\" formControlName=\"name\" />\r\n  </mat-form-field>\r\n  @if(addTaskForm.controls.name.invalid && addTaskForm.controls.name.touched){\r\n  <mat-error>{{ getValidationMessage() }}</mat-error>\r\n  }\r\n  <mat-form-field>\r\n    <mat-label>Please explain the task</mat-label>\r\n    <textarea\r\n      matInput\r\n      placeholder=\"Task description\"\r\n      formControlName=\"description\"\r\n    ></textarea>\r\n  </mat-form-field>\r\n  <button mat-raised-button color=\"primary\" type=\"submit\">Add Task</button>\r\n</form>\r\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RegisterService } from 'src/app/services/register/register.service';\n\n@Component({\n  standalone: true,\n  imports: [],\n  selector: 'app-email-confirm',\n  templateUrl: './email-confirm.component.html',\n  styleUrls: ['./email-confirm.component.scss'],\n})\nexport class EmailConfirmComponent implements OnInit {\n  token = '';\n  tokenId = '';\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private registerService: RegisterService\n  ) {}\n\n  ngOnInit(): void {\n    this.activatedRoute.queryParams.subscribe((queryParam) => {\n      this.token = queryParam.token;\n      this.tokenId = queryParam.tokenId;\n      this.confirmUser();\n    });\n  }\n\n  confirmUser() {\n    // this.registerService.confirmUser( this.token, this.tokenId).then( res=>console.log(res));\n  }\n}\n","\n\n<div class=\"confirm-email-container\">\n    <div class=\"email-confirm-text\">\n        <p>Your email has been confirmed </p>\n\n    </div>\n</div>\n<!-- <mat-form-field appearance=\"fill\">\n    <mat-label>Input</mat-label>\n    <input matInput>\n  </mat-form-field>\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Select</mat-label>\n    <mat-select>\n      <mat-option value=\"one\">First option</mat-option>\n      <mat-option value=\"two\">Second option</mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Textarea</mat-label>\n    <textarea matInput></textarea>\n  </mat-form-field>\n   -->","import { Component, inject, OnInit } from '@angular/core';\nimport { FormControl, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { LoginService } from 'src/app/services/login/login.service';\nimport { RegisterComponent } from '../register/register.component';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { Router } from '@angular/router';\n\n@Component({\n  standalone: true,\n  imports: [\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    MatIconModule,\n    MatInputModule,\n  ],\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  email = new FormControl('', [Validators.required, Validators.email]);\n  password = new FormControl('', [Validators.required]);\n\n  hide = true;\n  userDetails = null;\n  loginService = inject(LoginService);\n  registerDialog = inject(MatDialog);\n  router = inject(Router);\n  // loginDialogRef = inject(MatDialogRef<LoginComponent>);\n  constructor() {}\n\n  ngOnInit(): void {}\n  getErrorMessage() {\n    if (this.email.hasError('required')) {\n      return 'You must enter a value';\n    }\n\n    return this.email.hasError('email') ? 'Not a valid email' : '';\n  }\n\n  async login() {\n    let loginCredentials = {\n      email: this.email.value,\n      password: this.password.value,\n    };\n    try {\n      const userSessionDetails = await this.loginService.loginEmailPassword(\n        loginCredentials\n      );\n      this.userDetails = userSessionDetails.user;\n      this.router.navigate(['/main']);\n      // this.closeLoginDialog();\n    } catch (error) {}\n  }\n  register() {\n    // this.loginDialogRef.close();\n    this.router.navigate(['/register']);\n    // let registerRef = this.registerDialog.open(RegisterComponent);\n    // registerRef.afterClosed().subscribe((result) => {\n    //   if (result) {\n    //     console.log(result);\n    //   }\n    // });\n  }\n\n  // closeLoginDialog() {\n  //   this.loginDialogRef.close({ userDetails: this.userDetails });\n  // }\n}\n","<div class=\"login-container\">\n  <h1 class=\"app-name has-gradient-text\">LifePlanner</h1>\n  <p>Login to start saving your life events</p>\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Enter your email</mat-label>\n    <input\n      matInput\n      placeholder=\"pat@example.com\"\n      [formControl]=\"email\"\n      required\n    />\n    @if(email.invalid){\n    <mat-error>{{ getErrorMessage() }}</mat-error>\n    }\n  </mat-form-field>\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Enter your password</mat-label>\n    <input\n      [formControl]=\"password\"\n      matInput\n      [type]=\"hide ? 'password' : 'text'\"\n      required\n    />\n    <button\n      mat-icon-button\n      matSuffix\n      (click)=\"hide = !hide\"\n      [attr.aria-label]=\"'Hide password'\"\n      [attr.aria-pressed]=\"hide\"\n    >\n      <mat-icon>{{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\n    </button>\n  </mat-form-field>\n\n  <button\n    class=\"standard-button-height\"\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"login()\"\n  >\n    Login\n  </button>\n  <p id=\"register-text\">\n    or...do you need to\n    <a href=\"javascript:void()\" (click)=\"register()\">register?</a>\n  </p>\n</div>\n","import { Component, inject, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormControl,\n  ReactiveFormsModule,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ToastrService } from 'ngx-toastr';\nimport { MatInputModule } from '@angular/material/input';\nimport { RegisterService } from 'src/app/services/register/register.service';\nimport { Session, User } from '@supabase/supabase-js';\n\n@Component({\n  standalone: true,\n  imports: [\n    MatIconModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    MatInputModule,\n  ],\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n  email = new FormControl('', [Validators.required, Validators.email]);\n  password = new FormControl('', [Validators.required]);\n  confirmPassword = new FormControl('', [Validators.required]);\n  userDetails:\n    | {\n        user: User | null;\n        session: Session | null;\n      }\n    | {\n        user: null;\n        session: null;\n      } = null;\n  hide = true;\n  toastRService = inject(ToastrService);\n  registerService = inject(RegisterService);\n  private registerDialogRef: MatDialogRef<RegisterComponent>;\n  registrationSuccess = false;\n\n  ngOnInit(): void {\n    this.password.valueChanges.subscribe(() => {\n      this.confirmPassword.updateValueAndValidity();\n    });\n  }\n\n  public static matchValues(\n    matchTo: string // name of the control to match to\n  ): (AbstractControl) => ValidationErrors | null {\n    return (control: AbstractControl): ValidationErrors | null => {\n      return !!control.parent &&\n        !!control.parent.value &&\n        control.value === control.parent.controls[matchTo].value\n        ? null\n        : { isMatching: false };\n    };\n  }\n  getErrorMessage(type) {\n    if (type == 'email') {\n      if (this.email.hasError('required')) {\n        return 'You must enter a value';\n      }\n\n      return this.email.hasError('email') ? 'Not a valid email' : '';\n    } else if (type == 'password') {\n      if (this.password.hasError('required')) {\n        return 'Password must be entered';\n      }\n    } else if (type == 'confirmPassword') {\n      if (this.confirmPassword.hasError('required')) {\n        return 'Please type your password again to confirm';\n      } else {\n        return 'Passwords do not match';\n      }\n    }\n    return 'You must enter a value';\n  }\n\n  async register(): Promise<void> {\n    console.log(\n      'valid registration for',\n      this.email.value,\n      '-',\n      this.password.value\n    );\n\n    this.userDetails = await this.registerService.registerUser(\n      this.email.value,\n      this.confirmPassword.value\n    );\n    if (this.userDetails.user) {\n      this.registrationSuccess = true;\n    }\n  }\n  closeLoginDialog() {\n    this.registerDialogRef.close();\n  }\n}\n","<div class=\"register-container\">\n  <h1 class=\"app-name has-gradient-text\">LifePlanner</h1>\n  @if(!registrationSuccess){\n  <p>Register</p>\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Enter your email</mat-label>\n    <input\n      matInput\n      placeholder=\"pat@example.com\"\n      [formControl]=\"email\"\n      required\n    />\n    @if(email.invalid){\n    <mat-error>{{ getErrorMessage(\"email\") }}</mat-error>\n    }\n  </mat-form-field>\n\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Enter your password</mat-label>\n    <input\n      [formControl]=\"password\"\n      matInput\n      [type]=\"hide ? 'password' : 'text'\"\n      required\n    />\n    <button\n      mat-icon-button\n      matSuffix\n      (click)=\"hide = !hide\"\n      [attr.aria-label]=\"'Hide password'\"\n      [attr.aria-pressed]=\"hide\"\n    >\n      <mat-icon>{{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\n    </button>\n    @if(password.invalid){\n    <mat-error>{{ getErrorMessage(\"password\") }}</mat-error>\n    }\n  </mat-form-field>\n\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Confirm password</mat-label>\n    <input\n      [formControl]=\"confirmPassword\"\n      matInput\n      [type]=\"hide ? 'password' : 'text'\"\n      required\n    />\n    <button\n      mat-icon-button\n      matSuffix\n      (click)=\"hide = !hide\"\n      [attr.aria-label]=\"'Hide password'\"\n      [attr.aria-pressed]=\"hide\"\n    >\n      <mat-icon>{{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\n    </button>\n    @if(confirmPassword.invalid){\n    <mat-error>{{ getErrorMessage(\"confirmPassword\") }}</mat-error>\n    }\n  </mat-form-field>\n\n  <button\n    class=\"standard-button-height\"\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"register()\"\n  >\n    Register\n  </button>\n  } @else {\n  <p>\n    Registration was successful for {{ userDetails.user.email }}. Please check\n    your email for verification.\n  </p>\n  }\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\n\n@Component({\n  standalone: true,\n  imports: [MatIconModule, MatDividerModule, MatFormFieldModule],\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss'],\n})\nexport class ResetPasswordComponent implements OnInit {\n  hide = true;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div class=\"reset-password-container\">\n  <div class=\"card reset-password-form\">\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Enter your password</mat-label>\n      <input matInput [type]=\"hide ? 'password' : 'text'\" required>\n      <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n        <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n      </button>\n    </mat-form-field>\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Confirm your password</mat-label>\n      <input matInput [type]=\"hide ? 'password' : 'text'\" required>\n      <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n        <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n      </button>\n    </mat-form-field>\n    <mat-divider></mat-divider>\n    <button class=\"standard-button-height\" mat-raised-button color=\"primary\">Confirm my password</button>\n\n  </div>\n</div>","import { Component, inject, OnInit } from '@angular/core';\nimport {\n  CdkDragDrop,\n  DragDropModule,\n  moveItemInArray,\n  transferArrayItem,\n} from '@angular/cdk/drag-drop';\n\nimport { LoginService } from 'src/app/services/login/login.service';\nimport { LoginComponent } from '../email/login/login.component';\nimport { Observable } from 'rxjs';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { MatIconModule } from '@angular/material/icon';\nimport { AddTaskComponent } from '../add-task/add-task.component';\nimport { IdeaType } from 'src/app/enums/idea-type.enum';\nimport { TaskService } from 'src/app/services/task/task.service';\nimport { UtilityService } from 'src/app/utility/utility.service';\n\n@Component({\n  standalone: true,\n  imports: [DragDropModule, MatIconModule],\n  selector: 'app-main-view',\n  templateUrl: './main-view.component.html',\n  styleUrls: ['./main-view.component.scss'],\n})\nexport class MainViewComponent implements OnInit {\n  containers = ['ideas', 'goals', 'objectives', 'achievements'];\n  ideas = [];\n  goals = [];\n  objectives = [];\n  achievements = [];\n  containerRefs = {\n    ideas: this.ideas,\n    goals: this.goals,\n    objectives: this.objectives,\n    achievements: this.achievements,\n  };\n\n  router = inject(Router);\n  taskService = inject(TaskService);\n\n  readonly addTaskDialog = inject(MatDialog);\n  ngOnInit(): void {\n    this.taskService.getTasks().then((data) => {\n      data.forEach((element) => {\n        if (element) {\n          const containerName = UtilityService.getEnumKeyByValue(\n            IdeaType,\n            element.type\n          );\n          this.containerRefs[containerName].push(element.name);\n        }\n      });\n    });\n  }\n\n  drop(event: CdkDragDrop<string[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    }\n  }\n\n  updateUserDetails(userDetails: any) {}\n\n  openAddTask(type: string): void {\n    console.log(IdeaType[type]);\n    const dialogRef = this.addTaskDialog.open(AddTaskComponent, {\n      data: { taskType: IdeaType[type] },\n    });\n    dialogRef.afterClosed().subscribe((data) => {\n      console.log(`Dialog result: ${data}`);\n    });\n  }\n}\n","<div class=\"root\">\n  <div class=\"board\">\n    <div class=\"board-bar\">\n      <p class=\"board-name\">Board Name</p>\n    </div>\n    <div class=\"board-wrapper\">\n      <div class=\"board-columns\" cdkDropListGroup>\n        @for(container of containers; track container){\n        <div class=\"board-column\" cdkDrag>\n          <div class=\"title-container flex-row-space-between\">\n            <div class=\"column-title\">{{ container }}</div>\n            <button class=\"add-task-button\" (click)=\"openAddTask(container)\">\n              <mat-icon>add</mat-icon>\n            </button>\n          </div>\n          <div\n            class=\"tasks-container example-list\"\n            cdkDropList\n            #todoList=\"cdkDropList\"\n            [cdkDropListData]=\"containerRefs[container]\"\n            (cdkDropListDropped)=\"drop($event)\"\n          >\n            @for(item of containerRefs[container]; track item){\n            <div class=\"tasks\" id=\"{{ container }}-tasks\" cdkDrag>\n              {{ item }}\n            </div>\n            }\n          </div>\n        </div>\n        }\n      </div>\n    </div>\n  </div>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  SUPABASE_URL: 'https://vcnvdgoqpadvxyglbjsx.supabase.co',\r\n  //anon-public key\r\n  SUPABASE_KEY:\r\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZjbnZkZ29xcGFkdnh5Z2xianN4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzA0MTU5OTQsImV4cCI6MjA0NTk5MTk5NH0.Ok5SbeonhQpPggxeHd_CM0dn0GbS2YQr8eb-rQOa9nM',\r\n  SUPABASE_SECRET_KEY:\r\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZjbnZkZ29xcGFkdnh5Z2xianN4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMDQxNTk5NCwiZXhwIjoyMDQ1OTkxOTk0fQ.qT9sBawOJY1bq56_K6fZ-k5dUC5piVkvvS1wmqpX6mo',\r\n\r\n  DB_CONNECTION_STRING:\r\n    'postgresql://postgres.vcnvdgoqpadvxyglbjsx:*d7xiT7B*65qp*S@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres',\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\nimport { environment } from './environments/environment';\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { appConfig } from './app/app.config';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nbootstrapApplication(AppComponent, appConfig).catch((err) =>\n  console.error(err)\n);\n"],"names":["inject","Router","RouterOutlet","AppComponent","constructor","title","userName","router","openLogin","navigate","navigateToHome","selectors","standalone","features","i0","ɵɵStandaloneFeature","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","AppComponent_Template_h1_click_3_listener","ɵɵtext","ɵɵelementEnd","ɵɵelement","styles","provideRouter","provideClientHydration","provideHttpClient","provideAnimations","provideToastr","routes","appConfig","providers","positionClass","closeButton","enableHtml","tapToDismiss","preventDuplicates","MainViewComponent","EmailConfirmComponent","ResetPasswordComponent","LoginComponent","RegisterComponent","path","component","IdeaType","ToastrService","SupabaseService","LoginService","toastRService","supabaseService","loginEmailPassword","loginCredentials","_this","_asyncToGenerator","data","error","supabase","auth","signInWithPassword","email","password","console","log","message","factory","ɵfac","providedIn","RegisterService","toastrService","registerUser","signUp","success","user","createClient","environment","supabaseUrl","SUPABASE_URL","supabaseKey","SUPABASE_KEY","getUser","userResponse","TaskService","addTask","taskData","from","insert","name","description","type","completion_status","user_id","id","getTasks","_this2","tasks","select","eq","UtilityService","getEnumKeyByValue","enumObj","value","Object","keys","find","key","ReactiveFormsModule","UntypedFormControl","UntypedFormGroup","Validators","MAT_DIALOG_DATA","MatFormFieldModule","MatInputModule","ɵɵadvance","ɵɵtextInterpolate","ctx_r0","getValidationMessage","AddTaskComponent","taskService","ngOnInit","addTaskForm","required","minLength","controls","hasError","task","taskType","ɵɵdirectiveInject","AddTaskComponent_Template","AddTaskComponent_Template_form_submit_0_listener","ɵɵtemplate","AddTaskComponent_Conditional_5_Template","ɵɵproperty","ɵɵconditional","invalid","touched","i1","MatFormField","MatLabel","MatError","i2","MatInput","i3","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","activatedRoute","registerService","token","tokenId","queryParams","subscribe","queryParam","confirmUser","ActivatedRoute","EmailConfirmComponent_Template","FormControl","MatDialog","MatIconModule","getErrorMessage","hide","userDetails","loginService","registerDialog","login","userSessionDetails","register","LoginComponent_Template","LoginComponent_Conditional_9_Template","LoginComponent_Template_button_click_14_listener","LoginComponent_Template_button_click_17_listener","LoginComponent_Template_a_click_21_listener","MatSuffix","RequiredValidator","FormControlDirective","MatIcon","i4","ctx_r1","RegisterComponent_Conditional_3_Conditional_6_Template","RegisterComponent_Conditional_3_Template_button_click_11_listener","ɵɵrestoreView","_r1","ɵɵnextContext","ɵɵresetView","RegisterComponent_Conditional_3_Conditional_14_Template","RegisterComponent_Conditional_3_Template_button_click_19_listener","RegisterComponent_Conditional_3_Conditional_22_Template","RegisterComponent_Conditional_3_Template_button_click_23_listener","confirmPassword","ɵɵtextInterpolate1","registrationSuccess","valueChanges","updateValueAndValidity","matchValues","matchTo","control","parent","isMatching","closeLoginDialog","registerDialogRef","close","RegisterComponent_Template","RegisterComponent_Conditional_3_Template","RegisterComponent_Conditional_4_Template","MatDividerModule","ResetPasswordComponent_Template","ResetPasswordComponent_Template_button_click_6_listener","ResetPasswordComponent_Template_button_click_13_listener","MatDivider","DragDropModule","moveItemInArray","transferArrayItem","ɵɵpropertyInterpolate1","container_r2","item_r4","MainViewComponent_For_8_Template_button_click_4_listener","$implicit","ctx_r2","openAddTask","MainViewComponent_For_8_Template_div_cdkDropListDropped_7_listener","$event","drop","ɵɵrepeaterCreate","MainViewComponent_For_8_For_10_Template","ɵɵrepeaterTrackByIdentity","containerRefs","ɵɵrepeater","containers","ideas","goals","objectives","achievements","addTaskDialog","then","forEach","element","containerName","push","event","previousContainer","container","previousIndex","currentIndex","updateUserDetails","dialogRef","open","afterClosed","MainViewComponent_Template","MainViewComponent_For_8_Template","CdkDropList","CdkDropListGroup","CdkDrag","production","SUPABASE_SECRET_KEY","DB_CONNECTION_STRING","enableProdMode","bootstrapApplication","catch","err"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}